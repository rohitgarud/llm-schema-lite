[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "llm-schema-lite"
dynamic = ["version"]
description = "LLM-ify your JSON schemas"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "Rohit Garud", email = "rohit.garuda1992@gmail.com" }
]
maintainers = [
    { name = "Rohit Garud", email = "rohit.garuda1992@gmail.com" }
]
keywords = [
    "pydantic",
    "schema",
    "llm",
    "json-schema",
    "openai",
    "token-optimization",
    "dspy"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]
dependencies = [
    "pydantic[email]>=2.10.0",
    "tiktoken>=0.12.0",
    "json-repair>=0.7.0",
    "regex>=2023.0.0",
    "pyyaml>=6.0.3",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.0",
    "coverage>=7.6.0",
    # Code Quality
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.7.10",
    # Type stubs for mypy
    "types-requests>=2.32.0",
    # Git Hooks & Changelog
    "pre-commit>=4.0.0",
    "gitlint>=0.19.0",
    "commitlint>=1.3.0",
    "git-changelog>=2.5.0",
    "psutil>=7.1.1",
]

dspy = [
    "dspy>=3.0.3",
]

benchmark = [
    "datasets>=4.2.0",
]

[project.urls]
Homepage = "https://github.com/rohitgarud/llm-schema-lite"
Repository = "https://github.com/rohitgarud/llm-schema-lite"
Issues = "https://github.com/rohitgarud/llm-schema-lite/issues"
Documentation = "https://github.com/rohitgarud/llm-schema-lite#readme"
Changelog = "https://github.com/rohitgarud/llm-schema-lite/blob/main/CHANGELOG.md"


[tool.hatch.build.targets.wheel]
packages = ["src/llm_schema_lite"]

[tool.hatch.version]
path = "src/llm_schema_lite/__init__.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=llm_schema_lite",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "-vv",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "asyncio: marks tests as async tests",
]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = ["W191"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101"]  # Allow assert in tests

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disable_error_code = "import-untyped"

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "__pycache__"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

[tool.git-changelog]
bump = "auto"
convention = "conventional"
in-place = true
output = "CHANGELOG.md"
parse-refs = true
parse-trailers = true
provider = "github"
repository = "."
sections = ["feat", "fix", "refactor", "docs", "chore", "test", "perf"]
template = "keepachangelog"
versioning = "semver"
zerover = true

[dependency-groups]
benchmark = [
    "datasets>=4.2.0",
]
dev = [
    "psutil>=7.1.1",
]
dspy = [
    "dspy>=3.0.3",
    "types-pyyaml>=6.0.12.20250915",
    "types-regex>=2025.9.18.20250921",
]
